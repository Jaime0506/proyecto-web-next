datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  COORDINATOR
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                   String            @id @default(cuid()) @map("id") /// id db
  nationalId           String           @unique @map("national_id") @db.VarChar(10) /// CÃ©dula
  firstName            String            @map("first_name")
  lastName             String            @map("last_name")
  email                String            @unique
  passwordHash         String            @map("password_hash")
  role                 Role              @default(USER)
  status               Boolean           @default(true)
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  // Relations
  applications         Application[]
  createdCalls         ScholarshipCall[] @relation("CreatedCalls")
  reviewedApplications Application[]     @relation("ReviewedApplications")
  Account              Account[]

  @@index([id])
  @@index([nationalId])
  @@index([email])
  @@map("users")
}

model ScholarshipCall {
  id                Int      @id @default(autoincrement())
  name              String
  academicPeriod    String   @map("academic_period") // Format: YYYY-S
  description       String?
  guidelineDocument String?  @map("guideline_document") // PDF URL
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  createdBy    User          @relation("CreatedCalls", fields: [createdById], references: [id])
  createdById  String        @map("created_by_id")
  applications Application[]

  @@index([academicPeriod])
  @@map("scholarship_calls")
}

model Application {
  id                   Int               @id @default(autoincrement())
  socioeconomicStratum Int               @map("socioeconomic_stratum")
  icfesResult          Int               @map("icfes_result_num")
  icfesResultPdf       String            @map("icfes_result_pdf") // PDF URL
  stratumProofPdf      String            @map("stratum_proof_pdf") // PDF URL
  motivationLetterPdf  String            @map("motivation_letter_pdf") // PDF URL
  status               ApplicationStatus @default(PENDING)
  createdAt            DateTime          @default(now()) @map("created_at")

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  userId          String          @map("user_id")
  scholarshipCall ScholarshipCall @relation(fields: [callId], references: [id])
  callId          Int             @map("call_id")
  reviewedBy      User?           @relation("ReviewedApplications", fields: [reviewedById], references: [id])
  reviewedById    String          @map("reviewed_by_id")
  reviewedAt      DateTime?       @map("reviewed_at")

  @@unique([userId, callId])
  @@index([status, userId])
  @@map("applications")
}

// AuthJS
model Account {
  user_id           String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@id([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}
